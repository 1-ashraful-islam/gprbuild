--  ============================================================================
--
--         WARNING: THIS FILE IS AUTO-GENERATED. DO NOT MODIFY.
--
--  This file was generated from phaSensorDepthData.idl using "rtiddsgen".
--  The rtiddsgen tool is part of the RTI Data Distribution Service distribution.
--  For more information, type 'rtiddsgen -help' at a command shell
--  or consult the RTI Data Distribution Service manual.
--
--  ============================================================================

pragma Warnings (Off); --  Since this is autogenerated code.

with DDS.DataReader;
with DDS.DataReader_Impl;
with DDS.ReadCondition;

with com.saabgroup.cms.pha.sensor.depth.Depth; use com.saabgroup.cms.pha.sensor.depth.Depth;
with com.saabgroup.cms.pha.sensor.depth.Depth_Seq;

pragma Warnings (On);
package com.saabgroup.cms.pha.sensor.depth.Depth_DataReader is

   type Ref is new DDS.DataReader_Impl.Ref with null record;
   type Ref_Access is access all Ref'Class;

   procedure Read
     (This            : not null access Ref;
      Received_Data   : not null access Depth_Seq.Sequence;
      Info_Seq        : not null access DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in DDS.Long := DDS.LENGTH_UNLIMITED;
      Sample_States   : in DDS.SampleStateMask := DDS.ANY_SAMPLE_STATE;
      View_States     : in DDS.ViewStateMask := DDS.ANY_VIEW_STATE;
      Instance_States : in DDS.InstanceStateMask := DDS.ANY_INSTANCE_STATE);

   procedure Take
     (This            : not null access Ref;
      Received_Data   : not null access Depth_Seq.Sequence;
      Info_Seq        : not null access DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in DDS.Long := DDS.LENGTH_UNLIMITED;
      Sample_States   : in DDS.SampleStateMask := DDS.ANY_SAMPLE_STATE;
      View_States     : in DDS.ViewStateMask := DDS.ANY_VIEW_STATE;
      Instance_States : in DDS.InstanceStateMask := DDS.ANY_INSTANCE_STATE);

   procedure Read_W_Condition
     (This          : not null access Ref;
      Received_Data : not null access Depth_Seq.Sequence;
      Info_Seq      : not null access DDS.SampleInfo_Seq.Sequence;
      Max_Samples   : in DDS.Long := DDS.LENGTH_UNLIMITED;
      Condition     : DDS.ReadCondition.Ref_Access);

   procedure Take_W_Condition
     (This          : not null access Ref;
      Received_Data : not null access Depth_Seq.Sequence;
      Info_Seq      : not null access DDS.SampleInfo_Seq.Sequence;
      Max_Samples   : in DDS.Long := DDS.LENGTH_UNLIMITED;
      Condition     : DDS.ReadCondition.Ref_Access);

   procedure Read_Next_Sample
     (This          : not null access Ref;
      Received_Data : not null Depth_Access;
      Sample_Info   : not null access DDS.SampleInfo);

   procedure Take_Next_Sample
     (This          : not null access Ref;
      Received_Data : not null Depth_Access;
      Sample_Info   : not null access DDS.SampleInfo);

   procedure Read_Instance
     (This            : not null access Ref;
      Received_Data   : not null access Depth_Seq.Sequence;
      Info_Seq        : not null access DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in DDS.Long := DDS.LENGTH_UNLIMITED;
      A_Handle        : access constant DDS.InstanceHandle_T;
      Sample_States   : in DDS.SampleStateMask := DDS.ANY_SAMPLE_STATE;
      View_States     : in DDS.ViewStateMask := DDS.ANY_VIEW_STATE;
      Instance_States : in DDS.InstanceStateMask := DDS.ANY_INSTANCE_STATE);

   procedure Take_Instance
     (This            : not null access Ref;
      Received_Data   : not null access Depth_Seq.Sequence;
      Info_Seq        : not null access DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in DDS.Long := DDS.LENGTH_UNLIMITED;
      A_Handle        : access constant DDS.InstanceHandle_T;
      Sample_States   : in DDS.SampleStateMask := DDS.ANY_SAMPLE_STATE;
      View_States     : in DDS.ViewStateMask := DDS.ANY_VIEW_STATE;
      Instance_States : in DDS.InstanceStateMask := DDS.ANY_INSTANCE_STATE);

   procedure Read_Next_Instance
     (This            : not null access Ref;
      Received_Data   : not null access Depth_Seq.Sequence;
      Info_Seq        : not null access DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in DDS.Long := DDS.LENGTH_UNLIMITED;
      Previous_Handle : access constant DDS.InstanceHandle_T;
      Sample_States   : in DDS.SampleStateMask := DDS.ANY_SAMPLE_STATE;
      View_States     : in DDS.ViewStateMask := DDS.ANY_VIEW_STATE;
      Instance_States : in DDS.InstanceStateMask := DDS.ANY_INSTANCE_STATE);

   procedure Take_Next_Instance
     (This            : not null access Ref;
      Received_Data   : not null access Depth_Seq.Sequence;
      Info_Seq        : not null access DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in DDS.Long := DDS.LENGTH_UNLIMITED;
      Previous_Handle : access constant DDS.InstanceHandle_T;
      Sample_States   : in DDS.SampleStateMask := DDS.ANY_SAMPLE_STATE;
      View_States     : in DDS.ViewStateMask := DDS.ANY_VIEW_STATE;
      Instance_States : in DDS.InstanceStateMask := DDS.ANY_INSTANCE_STATE);

   procedure Read_Next_Instance_W_Condition
     (This            : not null access Ref;
      Received_Data   : not null access Depth_Seq.Sequence;
      Info_Seq        : not null access DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in DDS.Long := DDS.LENGTH_UNLIMITED;
      Previous_Handle : access constant DDS.InstanceHandle_T;
      Condition       : DDS.ReadCondition.Ref_Access);

   procedure Take_Next_Instance_W_Condition
     (This            : not null access Ref;
      Received_Data   : not null access Depth_Seq.Sequence;
      Info_Seq        : not null access DDS.SampleInfo_Seq.Sequence;
      Max_Samples     : in DDS.Long := DDS.LENGTH_UNLIMITED;
      Previous_Handle : access constant DDS.InstanceHandle_T;
      Condition       : DDS.ReadCondition.Ref_Access);

   procedure Get_Key_Value
     (This       : not null access Ref;
      Key_Holder : not null Depth_Access;
      Handle     : access constant DDS.InstanceHandle_T);

   procedure Lookup_Instance
     (This       : not null access Ref;
      Key_Holder : not null Depth_Access);

   procedure Return_Loan
     (This          : not null access Ref;
      Received_Data : not null access Depth_Seq.Sequence;
      Info_Seq      : not null access DDS.SampleInfo_Seq.Sequence);

   function CreateTypedI return DDS.DataReader.Ref_Access;

   procedure DestroyTypedI
     (Reader : in out DDS.DataReader.Ref_Access);

end com.saabgroup.cms.pha.sensor.depth.Depth_DataReader;
